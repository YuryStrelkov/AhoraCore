////Textures
const int   DiffuseID = 0,
	    	NormalID = 1,
     		SpecularID = 2,
			HeightID = 3,
			ReflectGlossID = 4,
			TransparencyID =5;

struct  channel
{
vec2 tileUV;
vec2 offsetUV;
vec4 multRGBA;
};

layout(std140)  uniform MaterialData
{
vec4 albedoColor;

vec4 ambientColor;

vec4 reflectionColor;

float reflectivity, metallness, roughness, transparency;

channel[8] matChannels;
};

uniform sampler2D   diffuseMap;
uniform sampler2D   normalMap;
uniform sampler2D   specularMap;
uniform sampler2D   heightMap;
uniform sampler2D   reflectGlossMap;
uniform sampler2D   transparencyMap;


 
vec3 getFromMap(sampler2D map, int t_channel)
{
return	texture(map, (v_TexCoord + matChannels[t_channel].offsetUV)*
                                    matChannels[t_channel].tileUV).xyz;
}


vec3 getNormal()
{
	return	normalize(getFromMap(normalMap, NormalID).xyz*2.0-1.0);
}

vec3 getDiffuse()
{
	return	normalize(getFromMap(diffuseMap, DiffuseID));
}

vec3 getSpecular()
{
	return	normalize(getFromMap(specularMap, SpecularID));
}


vec3 getHeight()
{
	return	normalize(getFromMap(heightMap, HeightID));
}


vec3 getReflectGloss()
{
	return	normalize(getFromMap(reflectGlossMap, ReflectGlossID));
}

vec3 getTransparency()
{
	return	normalize(getFromMap(transparencyMap, TransparencyID));
}


