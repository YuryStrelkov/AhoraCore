#version 430

#include CameraDefinition; ///10

#include TerrainMaterialData; //47

#include TerrainSettings; //10

layout(triangles) in;

///layout( triangle_strip, max_vertices = 3 )out;
layout( line_strip, max_vertices = 3 )out;
out vec2 mapCoord_FS;

out vec3 position_FS;

out vec3 tangent_FS;

in vec2 mapCoord_GS[];

uniform sampler2D normalMap;
 
uniform sampler2D blendMap;
  
vec3 calcTangent()
{

vec3 e1 = gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz;

vec3 e2 = gl_in[2].gl_Position.xyz - gl_in[0].gl_Position.xyz;

vec2 deltaUV1 =mapCoord_GS[1]-mapCoord_GS[0];

vec2 deltaUV2 =mapCoord_GS[2]-mapCoord_GS[0];

float r=1.0/(deltaUV1.x*deltaUV2.y - deltaUV1.y*deltaUV2.x);

return normalize((e1*deltaUV2.y - e2*deltaUV1.y)*r);

}  

vec3 displacement[3]; 
  
void main()
{
	vec4 pos;
	
	vec3 tangent;
	
	mat4   vpm = projectionMatrix*viewMatrix;
		
	for (int i=0; i < gl_in.length();i++) {displacement[i]=vec3(0,0,0);}

	float dist = (distance(gl_in[0].gl_Position.xyz,cameraPosition.xyz)+
			      distance(gl_in[1].gl_Position.xyz,cameraPosition.xyz)+
				  distance(gl_in[2].gl_Position.xyz,cameraPosition.xyz))/3;
	
	if(dist < TBNrange)
	{
	    tangent = calcTangent();
			
		for(int k = 0 ; k < gl_in.length() ; k++)
		{
				displacement[k]=vec3(0,1,0);
					
				vec3 normal  = normalize(texture(normalMap, mapCoord_GS[k]).rbg);
				
				vec4 blendValues = texture(blendMap,mapCoord_GS[k]).rgba;
				
				float [4] blendValsArray = float[](blendValues.r,blendValues.g,blendValues.b,blendValues.a);
				
				float scale=0;
				
				for(int i = 0 ; i < 3 ; i++)
					{
					scale += texture(materials[i].heightMap, mapCoord_GS[k]
									 *settings[i].scaling.x).r
									 *settings[i].scaling.y
									 *blendValsArray[i];
					}
				
			float attenuation = clamp(- distance(gl_in[k].gl_Position.xyz, cameraPosition.xyz)/(TBNrange-50) + 1,0.0,1.0);
			
			scale *= attenuation;

			displacement[k]*=scale;
		}
	}
	
	for (int i = 0; i < gl_in.length(); ++i)
	{
		pos = gl_in[i].gl_Position + vec4(displacement[i],0);
		
		gl_Position = vpm*pos;
		
		mapCoord_FS = mapCoord_GS[i];
		
		position_FS = pos.xyz;
		
		tangent_FS = tangent;
		
		EmitVertex();
	}
	
	EndPrimitive();
}