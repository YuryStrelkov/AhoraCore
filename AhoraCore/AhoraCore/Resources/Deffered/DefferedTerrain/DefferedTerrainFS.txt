#version 430

layout (location = 0)out vec4 gPosition;//++
layout (location = 1)out vec3 gNormal;//+
layout (location = 2)out vec4 gColor;//+
layout (location = 3)out vec3 gFresnel;//++

#include TerrainMaterialData;

#include TerrainSettings;

#include CameraDefinition;

in vec2 mapCoord_FS;

in vec3 position_FS;

in vec3 tangent_FS;

uniform sampler2D normalMap;

uniform sampler2D heightMap;

uniform sampler2D blendMap;

void main()
{
	float dist = length(cameraPosition.xyz - position_FS);

	float height = position_FS.y;

	vec3 fresnel;

	vec3 normal = normalize( texture(normalMap,mapCoord_FS).rbg);
	
    vec4 blendValues = texture(blendMap,mapCoord_FS).rgba;
    
	float [4] blendValsArray = float[](blendValues.r,blendValues.g,blendValues.b,blendValues.a);
	
	if(dist < TBNrange - 50)
	{
		float attenuation =clamp(-dist/(TBNrange-50)+1,0.0,1.0);
	
		vec3 biTangent = normalize(cross(tangent_FS,normal));
	
    	mat3 TBN = mat3(tangent_FS,normal,biTangent);
		
		vec3 bumpNormal = vec3(0,0,0);
		
		for (int i=0;i < MAX_MATERIALS;i++)
		{
		bumpNormal += (2*(texture(materials[i].normalMap, mapCoord_FS * settings[i].scaling.x).rbg) - 1) * blendValsArray[i];
		fresnel += (texture(materials[i].specularMap, mapCoord_FS * settings[i].scaling.x).rbg)* blendValsArray[i];
		}		
		bumpNormal=normalize(bumpNormal);
		
		bumpNormal.xz *= attenuation;
		
		normal = normalize(TBN*bumpNormal);
	}
	
	vec3 fragmentColor =  vec3(0,0,0);
	
	for(int i=0; i < MAX_MATERIALS; i++ )
	{
	fragmentColor+= texture(materials[i].diffuseMap,mapCoord_FS*settings[i].scaling.x).rgb* blendValsArray[i]; 
	}
	
	///Outputs
	gPosition = viewMatrix*vec4(position_FS,1);
	
	gNormal = mat3(viewMatrix)*normal;
	
	gColor = vec4(fragmentColor,1.0);
	
	gFresnel = fresnel;
}