#version 430

#include CameraDefinition; ///10

#include TerrainMaterialData; //47

#include TerrainSettings; //10

layout(triangles) in;

layout( triangle_strip, max_vertices = 12)out;

out vec2 mapCoord_FS;

out vec3 position_FS;

out vec3 tangent_FS;

out vec3 normal_FS;

out float distance_FS;

in vec2 mapCoord_GS[];

uniform sampler2D heightMap;

uniform sampler2D blendMap;

uniform float gap;


//uniform sampler2D TransformMapX;
//uniform sampler2D TransformMapY;
//uniform sampler2D TransformMapZ;

/*mat4 getGrassTransform(vec2 mapCoords)
{
	return mat4(vec4(texture(TransformMapX,mapCoords).rgb,0),
				vec4(texture(TransformMapY,mapCoords).rgb,0),
				vec4(texture(TransformMapZ,mapCoords).rgb,0),
				vec4(0,0,0,1));
}
*/
const float size = 150;

void EmitGrassLod(mat4 projView, vec4 pos, vec3 centr)
{
  float size =	sqrt(gap)*ScaleXZ/80;
  
  vec4 offset = vec4( centr - pos.xyz,0);
  
  offset /=length(offset);
  
  offset = offset*0.1*size;
  
  vec4 actualPosition;
  
  vec4 position = pos + offset; 
  
///quad 1
//v1
	actualPosition = position + size*vec4(-0.5,1,0,0);
	
	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(0,1);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0,0,1);
	
	EmitVertex();
//v2
	actualPosition = position +  size*vec4(-0.5,0,0,0);

	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(0,0);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0,0,1);
	
	EmitVertex();
//v3
	actualPosition = position + size*vec4(0.5,1,0,0);

	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(1,1);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0,0,1);
	
	EmitVertex();
//v4
	
	actualPosition = position + size*vec4(0.5,0,0,0);

	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(1,0);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0,0,1);
	
	EmitVertex();	
	
	EndPrimitive();
	
///quad 2	
//v1
	actualPosition = position + size*vec4(-0.3535,1,0.3535,0);
	
	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(0,1);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,0.3535);
	
	EmitVertex();
//v2
	actualPosition = position + size*vec4(-0.3535,0,0.3535,0);

	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(0,0);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,0.3535);
	
	EmitVertex();
//v3
	actualPosition = position + size*vec4(0.3535,1,-0.3535,0);
	
	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(1,1);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,0.3535);
	
	EmitVertex();
//v4
	
	actualPosition =position + size*vec4(0.3535,0,-0.3535,0);
	
	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(1,0);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,0.3535);
	
	EmitVertex();	
	
	EndPrimitive();
///quad 3	
//v1
	actualPosition = position + size*vec4(0.3535,1,0.3535,0);

	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(0,1);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,-0.3535);
	
	EmitVertex();
//v2
	actualPosition =position +  size*vec4(0.3535,0,0.3535,0);
	
	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(0,0);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,-0.3535);
	
	EmitVertex();
//v3
	actualPosition=position + size*vec4(-0.3535,1,-0.3535,0);
	
	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(1,1);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,-0.3535);
	
	EmitVertex();
//v4
	actualPosition = position + size*vec4(-0.3535,0,-0.3535,0) ;

	distance_FS = distance(cameraPosition.xyz,actualPosition.xyz);
	
	gl_Position = projView*actualPosition;
		
	mapCoord_FS = vec2(1,0);
		
	position_FS = actualPosition.xyz;
		
	normal_FS   = vec3(0.3535,0,-0.3535);
	
	EmitVertex();	
	
    EndPrimitive();
}
  
void main()
{
	mat4  vpm = projectionMatrix*viewMatrix;
	
	float dist;
	
	vec3 trisCentr=vec3(0,0,0);
	
	  for (int i = 0; i < gl_in.length();++i)
	 {
		trisCentr+=gl_in[i].gl_Position.xyz;
	 }
	
	
	   for (int i = 0; i < gl_in.length();++i)
	 {
		 if(texture(blendMap,mapCoord_GS[i]).r < 0.5)
		{
			continue;
		} 
		
		dist = distance(cameraPosition.xyz,gl_in[i].gl_Position.xyz);
		

		if(dist > ScaleXZ/8)
		{
			continue;			
		}
		
		EmitGrassLod(vpm, gl_in[i].gl_Position,trisCentr);
	 }
	 EndPrimitive();
	
}