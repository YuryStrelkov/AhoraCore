//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AhoraCore.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AhoraCore.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на layout(std140, row_major) uniform CameraData
        ///{
        ///	mat4 viewMatrix;
        ///	mat4 projectionMatrix;
        ///	vec4 [6] frustumPlanes;
        ///	vec4 cameraPosition;
        ///	vec4 cameraLookAt;
        ///};
        /// .
        /// </summary>
        internal static string CameraDefinition {
            get {
                return ResourceManager.GetString("CameraDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap checkerboard_rainbow {
            get {
                object obj = ResourceManager.GetObject("checkerboard_rainbow", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Clouds {
            get {
                object obj = ResourceManager.GetObject("Clouds", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Clouds1 {
            get {
                object obj = ResourceManager.GetObject("Clouds1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 
        ///
        ///#include CameraDefinition;
        ///
        ///uniform sampler2D Positions;
        ///
        ///uniform sampler2D Normals;
        ///
        ///uniform sampler2D Colors;
        ///
        ///uniform sampler2D Fresnels;
        ///
        ///uniform sampler2D SSAO;
        ///
        ///in vec2 TexCoord;
        ///
        ///const vec3 direction = vec3(1,1,-1);
        ///
        ///const float intensity = 1.2;
        ///
        ///const float zFar = 400;
        ///
        ///const float zNear = 0.1;
        ///
        ///const float sightRange = 0.6;
        ///
        ///float fogFactor(float dist)
        ///{
        ///	return -0.0002/sightRange*(dist-zFar/10*sightRange) + 1;
        ///}
        ///
        ///const vec3 fogColor = vec3(0.65,0.85,0. [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedFinalPassFS {
            get {
                return ResourceManager.GetString("DefferedFinalPassFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///layout (location =0)in vec3 aPosition;
        ///layout (location =1)in vec2 aTexCoord;
        ///
        ///out vec2 TexCoord;
        ///
        ///uniform  vec3 position;
        ///
        ///uniform  vec3 scale;
        ///
        ///void  main()
        ///{
        ///
        ///    gl_Position = vec4((aPosition), 1);
        ///    TexCoord  = aTexCoord;
        ///}
        ///
        ///.
        /// </summary>
        internal static string DefferedFinalPassVS {
            get {
                return ResourceManager.GetString("DefferedFinalPassVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///layout (location = 0)out vec4 gPosition;//++
        ///layout (location = 1)out vec3 gNormal;//+
        ///layout (location = 2)out vec4 gColor;//+
        ///layout (location = 3)out vec3 gFresnel;//++
        ///
        ///#include TerrainSettings; //10
        ///
        ///#include CameraDefinition; ///10
        ///
        ///in vec2 mapCoord_FS;
        ///
        ///in vec3 position_FS;
        ///
        ///in vec3 normal_FS;
        ///
        ///in float distance_FS;
        ///
        ///uniform sampler2D grassMap;
        ///
        ///void main()
        ///{
        /// 
        ///	vec4 color = texture(grassMap,vec2(mapCoord_FS.x,1-mapCoord_FS.y)).rgba;
        ///	
        ///	if(color.a&lt;0.5)
        ///	{
        ///		d [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedGrassFS {
            get {
                return ResourceManager.GetString("DefferedGrassFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include CameraDefinition; ///10
        ///
        ///#include TerrainMaterialData; //47
        ///
        ///#include TerrainSettings; //10
        ///
        ///layout(triangles) in;
        ///
        ///layout( triangle_strip, max_vertices = 12)out;
        ///
        ///out vec2 mapCoord_FS;
        ///
        ///out vec3 position_FS;
        ///
        ///out vec3 tangent_FS;
        ///
        ///out vec3 normal_FS;
        ///
        ///out float distance_FS;
        ///
        ///in vec2 mapCoord_GS[];
        ///
        ///uniform sampler2D heightMap;
        ///
        ///uniform sampler2D blendMap;
        ///
        ///uniform float gap;
        ///
        ///
        /////uniform sampler2D TransformMapX;
        /////uniform sampler2D TransformMapY;
        /////uni [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedGrassGS {
            get {
                return ResourceManager.GetString("DefferedGrassGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///layout(vertices = 16) out;
        ///
        ///in vec2 mapCoord_TC[];
        ///
        ///out vec2 mapCoord_TE[];
        ///
        ///const int AB=2;
        ///
        ///const int BC=3;
        ///
        ///const int CD=0;
        ///
        ///const int DA=1;
        ///
        ///void main()
        ///{
        ///	if (gl_InvocationID == 0)
        ///	{
        ///		gl_TessLevelOuter[AB] = 6;
        ///		gl_TessLevelOuter[BC] = 6;
        ///		gl_TessLevelOuter[CD] = 6;
        ///		gl_TessLevelOuter[DA] = 6; 
        ///
        ///		gl_TessLevelInner[0] = 10;
        ///		gl_TessLevelInner[1] = 10;
        ///	}	
        ///	
        ///	mapCoord_TE[gl_InvocationID] = mapCoord_TC[gl_InvocationID];
        ///	
        ///	gl_out[gl_InvocationID].gl_Posi [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedGrassTC {
            get {
                return ResourceManager.GetString("DefferedGrassTC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///layout(quads, fractional_odd_spacing, cw) in;
        ///
        ///in vec2 mapCoord_TE[];
        ///
        ///out vec2 mapCoord_GS;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///void main()
        ///{
        ///	float u = gl_TessCoord.x;
        ///	
        ///	float v = gl_TessCoord.y;
        ///	
        ///	vec4 position =((1-u) * (1-v) * gl_in[12].gl_Position+
        ///					   u  * (1-v) * gl_in[0].gl_Position+
        ///					   u  *  v    * gl_in[3].gl_Position+
        ///					(1-u) *  v    * gl_in[15].gl_Position);
        ///	
        ///	vec2 mapCoord=((1-u) * (1-v) * mapCoord_TE[12]+
        ///					  u  * ( [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedGrassTE {
            get {
                return ResourceManager.GetString("DefferedGrassTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TransformDefinition;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(location = 0)in vec2 p_position;
        ///
        ///out vec2 mapCoord_TC;
        ///
        ///uniform mat4 LocTransMatrix;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///void main()
        ///{
        ///	vec2 localPos = (LocTransMatrix*vec4(p_position.x, 0 , p_position.y, 1)).xz;	
        ///	
        ///	mapCoord_TC = localPos;
        ///	
        ///	gl_Position =  worldTransform * vec4(localPos.x, texture(heightMap,localPos).r,  localPos.y, 1);
        ///}.
        /// </summary>
        internal static string DefferedGrassVS {
            get {
                return ResourceManager.GetString("DefferedGrassVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0)out vec4 framePosition;
        ///layout (location = 1)out vec3 frameNormal;
        ///layout (location = 2)out vec4 frameColor;
        ///layout (location = 3)out vec3 frameFresnel; 
        ///
        ///#include MaterialDefinition;
        ///
        ///#include CameraDefinition;
        ///
        ///in struct VS_OUT
        ///{
        ///	vec2 texcoord;
        ///	vec3 tangent;
        ///	vec3 normal;
        ///	mat3 TBN;
        ///	vec4 position;
        ///}vs_out;
        ///
        ///
        ///void main()
        ///{ 
        ///	discard;
        ///	vec3 zeros = vec3(0);
        ///
        ///	framePosition =  vs_out.position;
        ///	
        ///	vec3 reflectDirScreen;
        ///	
        ///	vec3 n = getNorm [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedMaterialFS {
            get {
                return ResourceManager.GetString("DefferedMaterialFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0) in vec4 Position;
        ///layout (location = 1) in vec2 TexCoord;
        ///layout (location = 2) in vec3 Normal;
        ///layout (location = 3) in vec3 Tangent;
        ///
        ///#include TransformDefinition;
        ///
        ///#include MaterialDefinition;
        ///
        ///#include CameraDefinition;
        ///
        ///out struct VS_OUT
        ///{
        ///	vec2 texcoord;
        ///	vec3 tangent;
        ///	vec3 normal;
        ///	mat3 TBN;
        ///	vec4 position;
        ///}vs_out;
        ///
        ///void  main()
        ///{	
        /// 	mat4 ViewTransform  =  viewMatrix*worldTransform;
        ///		
        ///	vs_out.texcoord   =  TexCoord;
        ///	
        ///	vs_out.tange [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedMaterialVS {
            get {
                return ResourceManager.GetString("DefferedMaterialVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///layout (location = 0)out vec4 gPosition;
        ///layout (location = 1)out vec3 gNormal;
        ///layout (location = 2)out vec4 gColor;
        ///layout (location = 3)out vec3 gFresnel; 
        ///
        ///#include MaterialDefinition;
        /// 
        ///in vec2 v_TexCoord;
        ///
        ///in vec3 v_normal;
        ///
        ///in vec4 v_position;
        ///
        ///in vec3 skyColor;
        /// 
        ///
        ///
        ///
        ///void main()
        ///{ 
        ///	gPosition  =  v_position;
        ///	
        ///	gNormal    =   v_normal;
        ///	
        ///	vec4 color =  getDiffuse(v_TexCoord);
        ///	
        ///	gColor.rgb =  mix(1.75*color.rgb,skyColor,0.5);
        ///					     
        ///    gColor.a    [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedSkyDomeFS {
            get {
                return ResourceManager.GetString("DefferedSkyDomeFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///layout (location = 0) in vec3 p_position;
        ///layout (location = 1) in vec2 p_texcoord;
        ///layout (location = 2) in vec3 p_normal;
        ///
        ///#include CameraDefinition;
        ///
        ///#include TransformDefinition;
        /// 
        ///out vec2 v_TexCoord;
        ///
        ///out vec3 v_normal;
        ///
        ///out vec4 v_position;
        ///
        ///out vec3 skyColor;
        /// 
        ///uniform vec4 DomeColor;
        /// 
        ///vec3 atmosphereDescend(vec3 position, vec4 atm_color)
        ///{
        ///return vec3(-0.00022*(position.y-2000)+ atm_color.x,
        ///			-0.00025*(position.y-2000)+ atm_color.y,
        ///			-0.00019*(position.y-2 [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedSkyDomeVS {
            get {
                return ResourceManager.GetString("DefferedSkyDomeVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///layout (location = 0)out vec4 gPosition;//++
        ///layout (location = 1)out vec3 gNormal;//+
        ///layout (location = 2)out vec4 gColor;//+
        ///layout (location = 3)out vec3 gFresnel;//++
        ///
        ///#include TerrainMaterialData;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///in vec2 mapCoord_FS;
        ///
        ///in vec3 position_FS;
        ///
        ///in vec3 tangent_FS;
        ///
        ///uniform sampler2D normalMap;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///uniform sampler2D blendMap;
        ///
        ///void main()
        ///{
        ///	float dist = length(cameraPosition.xyz - po [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedTerrainFS {
            get {
                return ResourceManager.GetString("DefferedTerrainFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include CameraDefinition; ///10
        ///
        ///#include TerrainMaterialData; //47
        ///
        ///#include TerrainSettings; //10
        ///
        ///layout(triangles) in;
        ///
        ///layout( triangle_strip, max_vertices = 3 )out;
        /////layout( line_strip, max_vertices = 3 )out;
        ///out vec2 mapCoord_FS;
        ///
        ///out vec3 position_FS;
        ///
        ///out vec3 tangent_FS;
        ///
        ///in vec2 mapCoord_GS[];
        ///
        ///uniform sampler2D normalMap;
        /// 
        ///uniform sampler2D blendMap;
        ///  
        ///vec3 calcTangent()
        ///{
        ///
        ///vec3 e1 = gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz;
        ///
        ///vec3 e2 = gl [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedTerrainGS {
            get {
                return ResourceManager.GetString("DefferedTerrainGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(vertices =  16) out;
        ///
        ///in vec2 mapCoord_TC[];
        ///
        ///out vec2 mapCoord_TE[];
        ///
        ///const int AB=2;
        ///
        ///const int BC=3;
        ///
        ///const int CD=0;
        ///
        ///const int DA=1;
        ///
        ///const int Max_Tess_level=16;
        ///
        ///float LodFactor(float dist)
        ///{
        ///	return  max( 0.0, tessellationFactor/pow(dist,tessellationSlope) + tessellationShift);
        ///}
        ///
        ///void main()
        ///{
        ///	if (gl_InvocationID==0)
        ///	{
        ///	vec3 abMid = vec3(gl_in[0].gl_Position  + gl_in[3].gl_Position)/2.0;
        ///	v [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedTerrainTC {
            get {
                return ResourceManager.GetString("DefferedTerrainTC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///layout(quads, fractional_odd_spacing, cw) in;
        ///
        ///in vec2 mapCoord_TE[];
        ///
        ///out vec2 mapCoord_GS;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///void main()
        ///{
        ///	float u = gl_TessCoord.x;
        ///	
        ///	float v = gl_TessCoord.y;
        ///	
        ///	vec4 position =((1-u) * (1-v) * gl_in[12].gl_Position+
        ///					   u  * (1-v) * gl_in[0].gl_Position+
        ///					   u  *  v    * gl_in[3].gl_Position+
        ///					(1-u) *  v    * gl_in[15].gl_Position);
        ///	
        ///	vec2 mapCoord=((1-u) * (1-v) * mapCoord_TE[12]+
        ///					  u  * ( [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedTerrainTE {
            get {
                return ResourceManager.GetString("DefferedTerrainTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TransformDefinition;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(location = 0)in vec2 p_position;
        ///
        ///out vec2 mapCoord_TC;
        ///
        ///uniform mat4 LocTransMatrix;
        ///
        ///uniform int lod;
        ///
        ///uniform  float gap;
        ///
        ///uniform vec2 location;
        ///
        ///uniform vec2 index;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///float morphLatitude(vec2 position) {
        ///	
        ///	vec2 frac = position - location;
        ///	
        ///	if (index == vec2(0,0)){
        ///		float morph = frac.x - frac.y;
        ///		if (morph &gt; 0)
        ///			return morph;
        ///	}
        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DefferedTerrainVS {
            get {
                return ResourceManager.GetString("DefferedTerrainVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///out vec4 out_Color;
        ///
        ///in vec3 v_Colour;
        ///
        ///in vec2 v_TexCoord;
        ///
        ///#include MaterialDefinition;
        ///
        ///uniform sampler2D defTexture;
        ///
        ///void main(void){
        ///
        ///	out_Color = vec4(v_Colour*texture(diffuseMap,v_TexCoord).xyz+albedoColor.xyz*getNormal(v_TexCoord),1);///vec4(v_Colour*texture(defTexture,v_TexCoord).xyz,1);///texture(modelTexture,pass_textureCoordinates);
        ///
        ///}.
        /// </summary>
        internal static string FSdefault {
            get {
                return ResourceManager.GetString("FSdefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap grass {
            get {
                object obj = ResourceManager.GetObject("grass", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///layout(location = 0) out vec4 outColor;
        ///
        ///#include TerrainSettings; //10
        ///
        ///#include CameraDefinition; ///10
        ///
        ///in vec2 mapCoord_FS;
        ///
        ///in vec3 position_FS;
        ///
        ///in vec3 normal_FS;
        ///
        ///in float distance_FS;
        ///
        ///const float intensity = 1.2;
        ///
        ///uniform sampler2D grassMap;
        ///
        ///float diffuse(vec3 dir, vec3 n, float i)
        ///{
        ///	return max(0.5, dot(n,dir) * i);
        ///}
        ///
        ///void main()
        ///{
        /// 
        ///	vec4 color = texture(grassMap,vec2(mapCoord_FS.x,1-mapCoord_FS.y)).rgba;
        ///	
        ///	if(color.a&lt;0.5)
        ///	{
        ///	discard;
        ///	}
        ///	
        ///	fl [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string GrassFS {
            get {
                return ResourceManager.GetString("GrassFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include CameraDefinition; ///10
        ///
        ///#include TerrainMaterialData; //47
        ///
        ///#include TerrainSettings; //10
        ///
        ///layout(triangles) in;
        ///
        ///layout( triangle_strip, max_vertices = 12)out;
        ///
        ///out vec2 mapCoord_FS;
        ///
        ///out vec3 position_FS;
        ///
        ///out vec3 tangent_FS;
        ///
        ///out vec3 normal_FS;
        ///
        ///out float distance_FS;
        ///
        ///in vec2 mapCoord_GS[];
        ///
        ///uniform sampler2D heightMap;
        ///
        ///uniform sampler2D blendMap;
        ///
        ///uniform float gap;
        ///
        ///
        /////uniform sampler2D TransformMapX;
        /////uniform sampler2D TransformMapY;
        /////uni [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string GrassGS {
            get {
                return ResourceManager.GetString("GrassGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///layout(vertices = 16) out;
        ///
        ///in vec2 mapCoord_TC[];
        ///
        ///out vec2 mapCoord_TE[];
        ///
        ///const int AB=2;
        ///
        ///const int BC=3;
        ///
        ///const int CD=0;
        ///
        ///const int DA=1;
        ///
        ///void main()
        ///{
        ///	if (gl_InvocationID == 0)
        ///	{
        ///		gl_TessLevelOuter[AB] = 4;
        ///		gl_TessLevelOuter[BC] = 4;
        ///		gl_TessLevelOuter[CD] = 4;
        ///		gl_TessLevelOuter[DA] = 4; 
        ///
        ///		gl_TessLevelInner[0] = 5;
        ///		gl_TessLevelInner[1] = 5;
        ///	}	
        ///	
        ///	mapCoord_TE[gl_InvocationID] = mapCoord_TC[gl_InvocationID];
        ///	
        ///	gl_out[gl_InvocationID].gl_Positi [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string GrassTC {
            get {
                return ResourceManager.GetString("GrassTC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///layout(quads, fractional_odd_spacing, cw) in;
        ///
        ///in vec2 mapCoord_TE[];
        ///
        ///out vec2 mapCoord_GS;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///void main()
        ///{
        ///	float u = gl_TessCoord.x;
        ///	
        ///	float v = gl_TessCoord.y;
        ///	
        ///	vec4 position =((1-u) * (1-v) * gl_in[12].gl_Position+
        ///					   u  * (1-v) * gl_in[0].gl_Position+
        ///					   u  *  v    * gl_in[3].gl_Position+
        ///					(1-u) *  v    * gl_in[15].gl_Position);
        ///	
        ///	vec2 mapCoord=((1-u) * (1-v) * mapCoord_TE[12]+
        ///					  u  * ( [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string GrassTE {
            get {
                return ResourceManager.GetString("GrassTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hm0 {
            get {
                object obj = ResourceManager.GetObject("hm0", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hm1 {
            get {
                object obj = ResourceManager.GetObject("hm1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hm2 {
            get {
                object obj = ResourceManager.GetObject("hm2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на const int   DiffuseID = 0,
        ///	    	NormalID = 1,
        ///     		SpecularID = 2,
        ///			HeightID = 3,
        ///			ReflectGlossID = 4,
        ///			TransparencyID =5;
        ///
        ///struct  channel
        ///{
        ///vec2 tileUV;
        ///vec2 offsetUV;
        ///vec4 multRGBA;
        ///};
        ///
        ///layout(std140)  uniform MaterialData
        ///{
        ///vec4 albedoColor;
        ///
        ///vec4 ambientColor;
        ///
        ///vec4 reflectionColor;
        ///
        ///float reflectivity, metallness, roughness, transparency;
        ///
        ///channel[8] matChannels;
        ///};
        ///
        ///uniform sampler2D   diffuseMap;
        ///uniform sampler2D   normalMap;
        ///uniform sampler2D   specularMap;
        ///u [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialDefinition {
            get {
                return ResourceManager.GetString("MaterialDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0)out vec4 gPosition;
        ///layout (location = 1)out vec3 gNormal;
        ///layout (location = 2)out vec4 gColor;
        ///layout (location = 3)out vec3 gFresnel; 
        ///
        /// const int diffuse = 0,
        ///           normal = 1,
        ///           specular = 2,
        ///           height = 3,
        ///           glosness = 4,
        ///           reflection = 5,
        ///           transperansy = 6,
        ///           ambientOcclusion = 7;
        ///
        ///struct  Channel
        ///{
        ///vec2 tileUV;
        ///vec2 offsetUV;
        ///vec4 multRGBA;
        ///};
        ///
        ///layout(std140) uniform MaterialData
        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialFS {
            get {
                return ResourceManager.GetString("MaterialFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0) in vec4 aPosition;
        ///layout (location = 1) in vec2 aTexCoord;
        ///layout (location = 2) in vec3 aNormals;
        ///layout (location = 3) in vec3 aTangents;
        ///layout (location = 4) in vec3 aBiTangents;
        ///
        ///out vec2 TexCoord;
        ///out vec3 Normal;
        ///out vec3 Tangent;
        ///out vec4 fragPosition;
        ///out mat3 TBN;
        ///out mat3 view_;
        ///
        ///layout(std140) uniform Camera
        ///{
        ///	mat4 camView;
        ///	mat4 camProjection;
        ///	vec3 camPosition;
        ///	vec3 camLookAt;
        ///	float FOV;
        ///	float aspect;
        ///};
        ///uniform mat4 model;
        ///        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialVS {
            get {
                return ResourceManager.GetString("MaterialVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430 core
        ///
        ///layout (local_size_x = 16, local_size_y = 16) in;
        ///
        ///layout (binding = 0, rgba32f) uniform writeonly image2D normalmap;
        ///
        ///uniform sampler2D displacementmap;
        ///uniform int N;
        ///uniform float normalStrength;
        ///
        ///void main(void)
        ///{
        ///	// z0 -- z1 -- z2
        ///	// |	 |     |
        ///	// z3 -- h  -- z4
        ///	// |     |     |
        ///	// z5 -- z6 -- z7
        ///	
        ///	ivec2 x = ivec2(gl_GlobalInvocationID.xy);
        ///	
        ///	vec2 texCoord = gl_GlobalInvocationID.xy/float(N);
        ///	
        ///	float texelSize = 1.0/N;
        ///	
        ///	float z0 = texture(displacemen [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string NormalMapRenderer {
            get {
                return ResourceManager.GetString("NormalMapRenderer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {
        ///  &quot;texture&quot;: [
        ///    {
        ///      &quot;type&quot;: &quot;texture2D&quot;,
        ///      &quot;name&quot;: &quot;diffuse_gray&quot;,
        ///      &quot;path&quot;: &quot;Resources\\Textures\\gGrey.jpg&quot;
        ///    },
        ///    {
        ///      &quot;type&quot;: &quot;texture2D&quot;,
        ///      &quot;name&quot;: &quot;diffuse_green&quot;,
        ///      &quot;path&quot;: &quot;Resources\\Textures\\gGreen.jpg&quot;
        ///    },
        ///    {
        ///      &quot;type&quot;: &quot;texture2D&quot;,
        ///      &quot;name&quot;: &quot;diffuse_yellow&quot;,
        ///      &quot;path&quot;: &quot;Resources\\Textures\\gYellow.jpg&quot;
        ///    },
        ///    {
        ///      &quot;type&quot;: &quot;texture2D&quot;,
        ///      &quot;name&quot;: &quot;diffuse_red&quot;,
        ///      &quot;path&quot;: &quot;Resources\\Textures\\gRed.jpg&quot;
        ///    },
        ///  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string Scene {
            get {
                return ResourceManager.GetString("Scene", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///#include MaterialDefinition;
        ///
        ///out vec4 out_Color;
        ///
        ///in vec3 v_Colour;
        ///in vec2 v_TexCoord;
        ///in vec3 v_normal;
        ///in vec3 skyColor;
        ///
        ///
        ///void main()
        ///{ 
        ///	vec4 color          =  getDiffuse(v_TexCoord);
        ///	
        ///	out_Color.rgb       =  mix(1.75*color.rgb,skyColor,0.5);
        ///					     
        ///    out_Color.a         =  color.r;
        ///}.
        /// </summary>
        internal static string SkyDomeFS {
            get {
                return ResourceManager.GetString("SkyDomeFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///layout (location = 0) in vec3 p_position;
        ///layout (location = 1) in vec2 p_texcoord;
        ///layout (location = 2) in vec3 p_normal;
        ///
        ///
        ///#include CameraDefinition;///10
        ///
        ///#include TransformDefinition;//5
        ///
        ///
        ///out vec3 v_Colour;
        ///out vec2 v_TexCoord;
        ///out vec3 v_normal;
        ///out vec3 skyColor;
        ///
        ///uniform vec4 DomeColor;
        /// 
        ///vec3 atmosphereDescend(vec3 position, vec4 atm_color)
        ///{
        ///return vec3(-0.00022*(position.y-2000)+ atm_color.x,
        ///			-0.00025*(position.y-2000)+ atm_color.y,
        ///			-0.00019*(position.y [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string SkyDomeVS {
            get {
                return ResourceManager.GetString("SkyDomeVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430 core
        ///
        ///layout (local_size_x = 16, local_size_y = 16) in;
        ///
        ///layout (binding = 0, rgba16f) uniform writeonly image2D splatMap;
        ///
        ///uniform sampler2D normalMap;
        ///
        ///uniform int N;
        ///
        ///void main(void)
        ///{
        ///	
        ///	ivec2 x = ivec2(gl_GlobalInvocationID.xy);
        ///	
        ///	vec2 x_inv = gl_GlobalInvocationID.xy/float(N);
        ///	
        ///	vec3 normal = normalize(texture(normalMap, x_inv).rgb);
        ///	
        ///	float slopeFactor = normal.z;
        ///	
        ///	vec4 blendVals = vec4(0,0,0,0);
        ///	
        ///	if(slopeFactor &gt; 0.5 )
        ///	{
        ///		blendVals.x = 1.0;
        ///	}	
        ///	else  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string SplatMapRenderer {
            get {
                return ResourceManager.GetString("SplatMapRenderer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///out vec3 FragColor;
        ///
        ///in vec2 TexCoord_;
        ///
        ///#include CameraDefinition;
        ///
        ///uniform sampler2D gPosition;
        ///uniform sampler2D gNormal;
        ///uniform sampler2D noizeMap;
        ///
        ///uniform int screenWidth;
        ///uniform int screenHeight;
        ///
        ///const int kernelSize = 32;
        ///
        ///layout(std140) uniform SSAOBuffer
        ///{
        ///	float ssaoRaduis;
        ///	float ssaoBias;
        ///	vec4 randVectors[kernelSize];
        ///};
        ///
        ///const float near = 0.1; // camProjection matrix&apos;s near plane
        ///const float far = 10000.0; // camProjection matrix&apos;s far plane
        ///
        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string SSAOPassFS {
            get {
                return ResourceManager.GetString("SSAOPassFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///layout (location =0)in vec3 aPosition_;
        ///layout (location =1)in vec2 aTexCoord_;
        ///
        ///out vec2 TexCoord_;
        ///
        ///void  main()
        ///{
        ///    gl_Position = vec4(aPosition_, 1.0);
        ///    TexCoord_  = aTexCoord_;
        ///}.
        /// </summary>
        internal static string SSAOPassVS {
            get {
                return ResourceManager.GetString("SSAOPassVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на layout(std140) uniform TerrainSettings
        ///{
        ///	float ScaleY;
        ///	float ScaleXZ;
        ///	float tessellationFactor;
        ///	float tessellationSlope;
        ///	float tessellationShift;
        ///	float TBNrange;
        ///	vec4 morphAreas0;
        ///	vec4 morphAreas1;
        ///};.
        /// </summary>
        internal static string TerrainDefinition {
            get {
                return ResourceManager.GetString("TerrainDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainMaterialData;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(location = 0) out vec4 outColor;
        ///
        ///in vec2 mapCoord_FS;
        ///
        ///in vec3 position_FS;
        ///
        ///in vec3 tangent_FS;
        ///
        ///uniform sampler2D normalMap;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///uniform sampler2D blendMap;
        ///
        ///const vec3 direction = vec3(0.0,1,0.0);
        ///
        ///const float intensity = 2.2;
        ///
        ///const float zFar = 10000;
        ///
        ///const float zNear = 0.1;
        ///
        ///const float sightRange = 0.6;
        ///
        ///float fogFactor(float dist)
        ///{ [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainFS {
            get {
                return ResourceManager.GetString("TerrainFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include CameraDefinition; ///10
        ///
        ///#include TerrainMaterialData; //47
        ///
        ///#include TerrainSettings; //10
        ///
        ///layout(triangles) in;
        ///
        ///layout( triangle_strip, max_vertices = 3 )out;
        /////layout( line_strip, max_vertices = 3 )out;
        ///out vec2 mapCoord_FS;
        ///
        ///out vec3 position_FS;
        ///
        ///out vec3 tangent_FS;
        ///
        ///in vec2 mapCoord_GS[];
        ///
        ///uniform sampler2D normalMap;
        /// 
        ///uniform sampler2D blendMap;
        ///  
        ///vec3 calcTangent()
        ///{
        ///
        ///vec3 e1 = gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz;
        ///
        ///vec3 e2 = gl [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainGS {
            get {
                return ResourceManager.GetString("TerrainGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на const int MAX_TEXTURE_CHANNELS = 6;
        ///const int MAX_MATERIALS = 3;
        ///
        ///const int   DiffuseID = 0,
        ///	    	NormalID = 1,
        ///     		SpecularID = 2,
        ///			HeightID = 3,
        ///			ReflectGlossID = 4,
        ///			TransparencyID =5;
        ///
        ///struct MaterialSettings
        ///{
        ///vec4 scaling;
        ///
        ///vec4 albedoColor;
        ///
        ///vec4 ambientColor;
        ///
        ///vec4 reflectionColor;
        ///};
        ///
        ///
        ///layout(std140) uniform MaterialData
        ///{
        ///MaterialSettings settings[MAX_MATERIALS];
        ///};
        ///
        ///struct Material
        ///{
        ///	sampler2D   diffuseMap;
        ///	sampler2D   normalMap;
        ///	sampler2D   specularMap [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainMaterialDefinition {
            get {
                return ResourceManager.GetString("TerrainMaterialDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {
        ///  &quot;ScaleXZ&quot;: 6000,
        ///  &quot;ScaleY&quot;: 500,
        ///  &quot;NormalStrength&quot;: 40,
        ///  &quot;HeigthMap&quot;: [ false, &quot;hm1&quot; ],
        ///  &quot;TessellationFactor&quot;: 600,
        ///  &quot;TessellationSlope&quot;: 0.9,
        ///  &quot;TessellationShift&quot;: 0.3,
        ///  &quot;TBNRange&quot;: 600,
        ///  &quot;LodRanges&quot;: [
        ///    1750,
        ///    874,
        ///    386,
        ///    192,
        ///    100,
        ///    50,
        ///    0,
        ///    0
        ///  ],
        ///  &quot;texture&quot;: [
        ///    {
        ///      &quot;name&quot;: &quot;grassMap&quot;,
        ///      &quot;path&quot;: &quot;Resources\\grass.png&quot;
        ///    },
        ///    {
        ///      &quot;name&quot;: &quot;grassDiffuse&quot;,
        ///      &quot;path&quot;: &quot;Resources\\textures\\terrain\\grass0_DIF.jpg&quot;
        ///    },
        ///  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainSettings {
            get {
                return ResourceManager.GetString("TerrainSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(vertices =  16) out;
        ///
        ///in vec2 mapCoord_TC[];
        ///
        ///out vec2 mapCoord_TE[];
        ///
        ///const int AB=2;
        ///
        ///const int BC=3;
        ///
        ///const int CD=0;
        ///
        ///const int DA=1;
        ///
        ///const int Max_Tess_level=16;
        ///
        ///float LodFactor(float dist)
        ///{
        ///	return  max( 0.0, tessellationFactor/pow(dist,tessellationSlope) + tessellationShift);
        ///}
        ///
        ///void main()
        ///{
        ///	if (gl_InvocationID==0)
        ///	{
        ///	vec3 abMid = vec3(gl_in[0].gl_Position  + gl_in[3].gl_Position)/2.0;
        ///	v [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainTC {
            get {
                return ResourceManager.GetString("TerrainTC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///layout(quads, fractional_odd_spacing, cw) in;
        ///
        ///in vec2 mapCoord_TE[];
        ///
        ///out vec2 mapCoord_GS;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///void main()
        ///{
        ///	float u = gl_TessCoord.x;
        ///	
        ///	float v = gl_TessCoord.y;
        ///	
        ///	vec4 position =((1-u) * (1-v) * gl_in[12].gl_Position+
        ///					   u  * (1-v) * gl_in[0].gl_Position+
        ///					   u  *  v    * gl_in[3].gl_Position+
        ///					(1-u) *  v    * gl_in[15].gl_Position);
        ///	
        ///	vec2 mapCoord=((1-u) * (1-v) * mapCoord_TE[12]+
        ///					  u  * ( [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainTE {
            get {
                return ResourceManager.GetString("TerrainTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TransformDefinition;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(location = 0)in vec2 p_position;
        ///
        ///out vec2 mapCoord_TC;
        ///
        ///uniform mat4 LocTransMatrix;
        ///
        ///uniform int lod;
        ///
        ///uniform  float gap;
        ///
        ///uniform vec2 location;
        ///
        ///uniform vec2 index;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///float morphLatitude(vec2 position) {
        ///	
        ///	vec2 frac = position - location;
        ///	
        ///	if (index == vec2(0,0)){
        ///		float morph = frac.x - frac.y;
        ///		if (morph &gt; 0)
        ///			return morph;
        ///	}
        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainVS {
            get {
                return ResourceManager.GetString("TerrainVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на layout(std140) uniform TransformData
        ///{
        ///mat4 localTransform;
        ///mat4 worldTransform;
        ///};.
        /// </summary>
        internal static string TransformDefinition {
            get {
                return ResourceManager.GetString("TransformDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///layout (location = 0) in vec3 p_position;
        ///layout (location = 1) in vec2 p_texcoord;
        ///layout (location = 2) in vec3 p_normal;
        ///
        ///
        ///#include CameraDefinition;
        ///
        ///#include TransformDefinition;
        ///
        ///
        ///out vec3 v_Colour;
        ///out vec2 v_TexCoord;
        ///out vec3 v_normal;
        ///
        ///
        ///void main(){
        ///
        ///    mat4 viewTransform = viewMatrix * worldTransform * localTransform ;
        ///	
        ///	gl_Position = projectionMatrix * viewTransform* vec4(p_position,1.0);
        ///
        ///	v_normal = (viewTransform*vec4(p_normal,1.0)).xyz;
        ///
        ///	 v_TexCoord =  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string VSdefault {
            get {
                return ResourceManager.GetString("VSdefault", resourceCulture);
            }
        }
    }
}
