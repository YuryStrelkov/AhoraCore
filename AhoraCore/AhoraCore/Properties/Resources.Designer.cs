//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AhoraCore.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AhoraCore.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на layout(std140, row_major) uniform CameraData
        ///{
        ///	mat4 viewMatrix;
        ///	mat4 projectionMatrix;
        ///	mat4 tiltMatix;
        ///	vec4 cameraPosition;
        ///	vec4 cameraLookAt;
        ///};
        /// .
        /// </summary>
        internal static string CameraDefinition {
            get {
                return ResourceManager.GetString("CameraDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap checkerboard_rainbow {
            get {
                object obj = ResourceManager.GetObject("checkerboard_rainbow", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Clouds {
            get {
                object obj = ResourceManager.GetObject("Clouds", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Clouds1 {
            get {
                object obj = ResourceManager.GetObject("Clouds1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///out vec4 out_Color;
        ///
        ///in vec3 v_Colour;
        ///
        ///in vec2 v_TexCoord;
        ///
        ///#include MaterialDefinition;
        ///
        ///uniform sampler2D defTexture;
        ///
        ///void main(void){
        ///
        ///	out_Color = vec4(v_Colour*texture(diffuseMap,v_TexCoord).xyz+albedoColor.xyz*getNormal(v_TexCoord),1);///vec4(v_Colour*texture(defTexture,v_TexCoord).xyz,1);///texture(modelTexture,pass_textureCoordinates);
        ///
        ///}.
        /// </summary>
        internal static string FSdefault {
            get {
                return ResourceManager.GetString("FSdefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap grass {
            get {
                object obj = ResourceManager.GetObject("grass", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///layout(location = 0) out vec4 outColor;
        ///
        ///#include CameraDefinition; ///10
        ///
        ///in vec2 uvCoord;
        ///
        ///in vec3 normal;
        ///
        ///in vec3 position_FS;
        ///
        ///const float zFar = 10000;
        ///
        ///const float zNear = 0.1;
        ///
        ///const float sightRange = 0.6;
        ///
        ///float fogFactor(float dist)
        ///{
        ///	return -0.0002/sightRange*(dist-zFar/10*sightRange) + 1;
        ///}
        ///
        /// 
        ///const vec3 fogColor = vec3(0.65,0.85,0.9);
        ///
        ///
        ///const vec3 direction = vec3(0.333,0.333,0.333);
        ///
        ///const float intensity = 1.2;
        ///
        ///uniform sampler2D grassMap;
        ///
        ///flo [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string GrassFS {
            get {
                return ResourceManager.GetString("GrassFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string GrassGS {
            get {
                return ResourceManager.GetString("GrassGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string GrassTC {
            get {
                return ResourceManager.GetString("GrassTC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string GrassTE {
            get {
                return ResourceManager.GetString("GrassTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TransformDefinition;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(location = 0)in vec2 p_position;
        ///
        ///out vec2 mapCoord_TC;
        ///
        ///uniform mat4 LocTransMatrix;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///void main()
        ///{
        ///	vec2 localPos = (LocTransMatrix*vec4(p_position.x, 0 , p_position.y, 1)).xz;	
        ///	
        ///	mapCoord_TC = localPos;
        ///	
        ///	gl_Position =  worldTransform * vec4(localPos.x, texture(heightMap,localPos).r,  localPos.y, 1);
        ///}.
        /// </summary>
        internal static string GrassVS {
            get {
                return ResourceManager.GetString("GrassVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hm0 {
            get {
                object obj = ResourceManager.GetObject("hm0", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hm1 {
            get {
                object obj = ResourceManager.GetObject("hm1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hm2 {
            get {
                object obj = ResourceManager.GetObject("hm2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ////Textures
        ///const int   DiffuseID = 0,
        ///	    	NormalID = 1,
        ///     		SpecularID = 2,
        ///			HeightID = 3,
        ///			ReflectGlossID = 4,
        ///			TransparencyID =5;
        ///
        ///struct  channel
        ///{
        ///vec2 tileUV;
        ///vec2 offsetUV;
        ///vec4 multRGBA;
        ///};
        ///
        ///layout(std140)  uniform MaterialData
        ///{
        ///vec4 albedoColor;
        ///
        ///vec4 ambientColor;
        ///
        ///vec4 reflectionColor;
        ///
        ///float reflectivity, metallness, roughness, transparency;
        ///
        ///channel[8] matChannels;
        ///};
        ///
        ///uniform sampler2D   diffuseMap;
        ///uniform sampler2D   normalMap;
        ///uniform sampler2D   s [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialDefinition {
            get {
                return ResourceManager.GetString("MaterialDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430 core
        ///
        ///layout (local_size_x = 16, local_size_y = 16) in;
        ///
        ///layout (binding = 0, rgba32f) uniform writeonly image2D normalmap;
        ///
        ///uniform sampler2D displacementmap;
        ///uniform int N;
        ///uniform float normalStrength;
        ///
        ///void main(void)
        ///{
        ///	// z0 -- z1 -- z2
        ///	// |	 |     |
        ///	// z3 -- h  -- z4
        ///	// |     |     |
        ///	// z5 -- z6 -- z7
        ///	
        ///	ivec2 x = ivec2(gl_GlobalInvocationID.xy);
        ///	
        ///	vec2 texCoord = gl_GlobalInvocationID.xy/float(N);
        ///	
        ///	float texelSize = 1.0/N;
        ///	
        ///	float z0 = texture(displacemen [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string NormalMapRenderer {
            get {
                return ResourceManager.GetString("NormalMapRenderer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///#include MaterialDefinition;
        ///
        ///out vec4 out_Color;
        ///
        ///in vec3 v_Colour;
        ///in vec2 v_TexCoord;
        ///in vec3 v_normal;
        ///in vec3 skyColor;
        ///
        ///
        ///void main()
        ///{ 
        ///	vec4 color          =  getDiffuse(v_TexCoord);
        ///	
        ///	out_Color.rgb       =  mix(1.75*color.rgb,skyColor,0.5);
        ///					     
        ///    out_Color.a         =  color.r;
        ///}.
        /// </summary>
        internal static string SkyDomeFS {
            get {
                return ResourceManager.GetString("SkyDomeFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///layout (location = 0) in vec3 p_position;
        ///layout (location = 1) in vec2 p_texcoord;
        ///layout (location = 2) in vec3 p_normal;
        ///
        ///
        ///#include CameraDefinition;
        ///
        ///#include TransformDefinition;
        ///
        ///
        ///out vec3 v_Colour;
        ///out vec2 v_TexCoord;
        ///out vec3 v_normal;
        ///out vec3 skyColor;
        ///
        ///uniform vec4 DomeColor;
        /// 
        ///vec3 atmosphereDescend(vec3 position, vec4 atm_color)
        ///{
        ///return vec3(-0.00022*(position.y-2000)+ atm_color.x,
        ///			-0.00025*(position.y-2000)+ atm_color.y,
        ///			-0.00019*(position.y-2000)+  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string SkyDomeVS {
            get {
                return ResourceManager.GetString("SkyDomeVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430 core
        ///
        ///layout (local_size_x = 16, local_size_y = 16) in;
        ///
        ///layout (binding = 0, rgba16f) uniform writeonly image2D splatMap;
        ///
        ///uniform sampler2D normalMap;
        ///
        ///uniform int N;
        ///
        ///void main(void)
        ///{
        ///	
        ///	ivec2 x = ivec2(gl_GlobalInvocationID.xy);
        ///	
        ///	vec2 x_inv = gl_GlobalInvocationID.xy/float(N);
        ///	
        ///	vec3 normal = normalize(texture(normalMap, x_inv).rgb);
        ///	
        ///	float slopeFactor = normal.z;
        ///	
        ///	vec4 blendVals = vec4(0,0,0,0);
        ///	
        ///	if(slopeFactor &gt; 0.5 )
        ///	{
        ///		blendVals.x = 1.0;
        ///	}	
        ///	else  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string SplatMapRenderer {
            get {
                return ResourceManager.GetString("SplatMapRenderer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на layout(std140) uniform TerrainSettings
        ///{
        ///	float ScaleY;
        ///	float ScaleXZ;
        ///	float tessellationFactor;
        ///	float tessellationSlope;
        ///	float tessellationShift;
        ///	float TBNrange;
        ///	vec4 morphAreas0;
        ///	vec4 morphAreas1;
        ///};.
        /// </summary>
        internal static string TerrainDefinition {
            get {
                return ResourceManager.GetString("TerrainDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainMaterialData;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(location = 0) out vec4 outColor;
        ///
        ///in vec2 mapCoord_FS;
        ///
        ///in vec3 position_FS;
        ///
        ///in vec3 tangent_FS;
        ///
        ///uniform sampler2D normalMap;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///uniform sampler2D blendMap;
        ///
        ///const vec3 direction = vec3(0.0,1,0.0);
        ///
        ///const float intensity = 2.2;
        ///
        ///const float zFar = 10000;
        ///
        ///const float zNear = 0.1;
        ///
        ///const float sightRange = 0.6;
        ///
        ///float fogFactor(float dist)
        ///{ [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainFS {
            get {
                return ResourceManager.GetString("TerrainFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include CameraDefinition; ///10
        ///
        ///#include TerrainMaterialData; //47
        ///
        ///#include TerrainSettings; //10
        ///
        ///layout(triangles) in;
        ///
        ///layout( triangle_strip, max_vertices = 3 )out;
        ///
        ///out vec2 mapCoord_FS;
        ///
        ///out vec3 position_FS;
        ///
        ///out vec3 tangent_FS;
        ///
        ///in vec2 mapCoord_GS[];
        ///
        ///uniform sampler2D normalMap;
        /// 
        ///uniform sampler2D blendMap;
        ///  
        ///vec3 calcTangent()
        ///{
        ///
        ///vec3 e1 = gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz;
        ///
        ///vec3 e2 = gl_in[2].gl_Position.xyz - gl_in[0].gl_Positio [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainGS {
            get {
                return ResourceManager.GetString("TerrainGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на const int MAX_TEXTURE_CHANNELS = 6;
        ///const int MAX_MATERIALS = 3;
        ///
        ///const int   DiffuseID = 0,
        ///	    	NormalID = 1,
        ///     		SpecularID = 2,
        ///			HeightID = 3,
        ///			ReflectGlossID = 4,
        ///			TransparencyID =5;
        ///
        ///struct MaterialSettings
        ///{
        ///vec4 scaling;
        ///
        ///vec4 albedoColor;
        ///
        ///vec4 ambientColor;
        ///
        ///vec4 reflectionColor;
        ///};
        ///
        ///
        ///layout(std140) uniform MaterialData
        ///{
        ///MaterialSettings settings[MAX_MATERIALS];
        ///};
        ///
        ///struct Material
        ///{
        ///	sampler2D   diffuseMap;
        ///	sampler2D   normalMap;
        ///	sampler2D   specularMap [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainMaterialDefinition {
            get {
                return ResourceManager.GetString("TerrainMaterialDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #terrain settings
        ///
        ///ScaleXZ 6000 
        ///
        ///ScaleY 800 
        ///
        ///HeigthMap false hm1 
        ///
        ///TessellationFactor 600 
        ///
        ///TessellationSlope 0,9 
        ///
        ///TessellationShift 0,3 
        ///
        ///TBNRange 900 
        ///
        ///LodRanges 1750 874 386 192 100 50 0 0
        ///
        ///texture grassDiffuse D:\GitHub\AhoraCore\AhoraCore\AhoraCore\Resources\textures\terrain\grass0_DIF.jpg
        ///texture grassNormal D:\GitHub\AhoraCore\AhoraCore\AhoraCore\Resources\textures\terrain\grass0_NRM.jpg
        ///texture grassDisplacement D:\GitHub\AhoraCore\AhoraCore\AhoraCore\Resources\textures\terrai [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainSettings {
            get {
                return ResourceManager.GetString("TerrainSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(vertices =  16) out;
        ///
        ///in vec2 mapCoord_TC[];
        ///
        ///out vec2 mapCoord_TE[];
        ///
        ///const int AB=2;
        ///
        ///const int BC=3;
        ///
        ///const int CD=0;
        ///
        ///const int DA=1;
        ///
        ///const int Max_Tess_level=16;
        ///
        ///float LodFactor(float dist)
        ///{
        ///	return  max( 0.0, tessellationFactor/pow(dist,tessellationSlope) + tessellationShift);
        ///}
        ///
        ///void main()
        ///{
        ///	if (gl_InvocationID==0)
        ///	{
        ///	vec3 abMid = vec3(gl_in[0].gl_Position  + gl_in[3].gl_Position)/2.0;
        ///	v [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainTC {
            get {
                return ResourceManager.GetString("TerrainTC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TerrainSettings;
        ///
        ///layout(quads, fractional_odd_spacing, cw) in;
        ///
        ///in vec2 mapCoord_TE[];
        ///
        ///out vec2 mapCoord_GS;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///void main()
        ///{
        ///	float u = gl_TessCoord.x;
        ///	
        ///	float v = gl_TessCoord.y;
        ///	
        ///	vec4 position =((1-u) * (1-v) * gl_in[12].gl_Position+
        ///					   u  * (1-v) * gl_in[0].gl_Position+
        ///					   u  *  v    * gl_in[3].gl_Position+
        ///					(1-u) *  v    * gl_in[15].gl_Position);
        ///	
        ///	vec2 mapCoord=((1-u) * (1-v) * mapCoord_TE[12]+
        ///					  u  * ( [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainTE {
            get {
                return ResourceManager.GetString("TerrainTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///
        ///#include TransformDefinition;
        ///
        ///#include TerrainSettings;
        ///
        ///#include CameraDefinition;
        ///
        ///layout(location = 0)in vec2 p_position;
        ///
        ///out vec2 mapCoord_TC;
        ///
        ///uniform mat4 LocTransMatrix;
        ///
        ///uniform int lod;
        ///
        ///uniform  float gap;
        ///
        ///uniform vec2 location;
        ///
        ///uniform vec2 index;
        ///
        ///uniform sampler2D heightMap;
        ///
        ///float morphLatitude(vec2 position) {
        ///	
        ///	vec2 frac = position - location;
        ///	
        ///	if (index == vec2(0,0)){
        ///		float morph = frac.x - frac.y;
        ///		if (morph &gt; 0)
        ///			return morph;
        ///	}
        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string TerrainVS {
            get {
                return ResourceManager.GetString("TerrainVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на layout(std140) uniform TransformData
        ///{
        ///mat4 localTransform;
        ///mat4 worldTransform;
        ///};.
        /// </summary>
        internal static string TransformDefinition {
            get {
                return ResourceManager.GetString("TransformDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 430
        ///layout (location = 0) in vec3 p_position;
        ///layout (location = 1) in vec2 p_texcoord;
        ///layout (location = 2) in vec3 p_normal;
        ///
        ///
        ///#include CameraDefinition;
        ///
        ///#include TransformDefinition;
        ///
        ///
        ///out vec3 v_Colour;
        ///out vec2 v_TexCoord;
        ///out vec3 v_normal;
        ///
        ///
        ///void main(){
        ///
        ///    mat4 viewTransform = viewMatrix * worldTransform * localTransform ;
        ///	
        ///	gl_Position = projectionMatrix * viewTransform* vec4(p_position,1.0);
        ///
        ///	v_normal = (viewTransform*vec4(p_normal,1.0)).xyz;
        ///
        ///	 v_TexCoord =  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string VSdefault {
            get {
                return ResourceManager.GetString("VSdefault", resourceCulture);
            }
        }
    }
}
